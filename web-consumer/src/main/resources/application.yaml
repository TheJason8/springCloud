server:
  port: 8765

spring:
  application:
    name: book-consumer #指定自己的服务名

eureka:
  client:
    register-with-eureka: true #服务注册开关
    fetch-registry: true #服务发现开关
    service-url: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka/,http://localhost:8761/eureka/} #向两个注册中心上报 一台挂掉还有一台可用}
  instance:
    prefer-ip-address: true #将自己的ip地址注册到Eureka服务中
    ip-address: ${IP_ADDRESS:127.0.0.1}
    instance-id: ${spring.application.name}:${server.port} #指定实例id

ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 5000 #请求连接的超时时间
  ReadTimeout: 6000 #请求处理的超时时间

hystrix:
  command:
    default: #如果要指定某个方法超时时长，将其改为方法名即可
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 3000 #线程超时,调用Fallback方法
      circuitBreaker:
        enabled: true
        requestVolumeThreshold: 10 #10秒内出现10个以上请求(已临近阀值),并且出错率在50%以上,开启断路器.断开服务,调用Fallback方法
        sleepWindowInMilliseconds: 10000 #断路器跳闸后，在此值的时间的内，hystrix会拒绝新的请求，只有过了这个时间断路器才会打开闸门
        errorThresholdPercentage: 60 #如果失败比率超过这个值，则断路器跳闸并且进入fallback逻辑，默认50%